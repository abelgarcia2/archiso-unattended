#!/bin/bash

# Installation types
readonly EXT4_UNENCRYPTED="ext4"
readonly LVM_UNENCRYPTED="lvm"
readonly LVM_ENCRYPTED="lvm_encrypted"

installation_type=$EXT4_UNENCRYPTED
encryption_key=""
root_passwd="arch"
hostname="arch"
timezone=$(date "+%Z")

swap_size=$(free --giga|grep "Mem"|awk '{print $2}')G

usage() {
    # installation type --> default ext4
    # encryption_key
    # root_passwd --> default arch
    # hostname --> default arch
    # timezone --> default current (UTC)
    # swap --> default = RAM // IN GIGABYTES!! // DISABLE EMPTY
    echo "Uso: $0 --parametro1 <valor1> --parametro2 <valor2> ... --parametron <valorn>"
    exit 1
}

post_install() {
    echo "Creating fstab..."
    genfstab -U /mnt >> /mnt/etc/fstab

    echo "Chroot..."
    arch-chroot /mnt /bin/bash << EOF
        echo "Setting timezone..."
        ln -sf /usr/share/zoneinfo/$timezone /etc/localtime

        echo "Setting hardware clock"
        hwclock --systohc

        sed -i "/en_US.UTF-8\|es_ES.UTF-8/s/^#//" /etc/locale.gen
        locale-gen

        echo "Setting default lang..."
        echo -e "LANG=es_ES.UTF-8\nLC_MESSAGES=en_US.UTF-8" > /etc/locale.conf

        echo "Setting hostname..."
        echo $hostname > /etc/hostname

        echo "Setting root password..."
        echo "root:$root_passwd" | chpasswd
EOF
}

add_lvm2_hook() {
    arch-chroot /mnt /bin/bash << EOF
        echo "Adding lvm2 hook..."
        sed -ri "s/(^HOOKS=.*)(block)(.*)(filesystems)/\1\2 lvm2 \4/" /etc/mkinitcpio.conf
EOF
}

add_encrypt_hook() {
    arch-chroot /mnt /bin/bash << EOF
        echo "Adding encrypt hook..."
        sed -ri "s/(^HOOKS=.*)(block)(.*)(lvm2)/\1\2 encrypt \4/" /etc/mkinitcpio.conf
EOF
}

regenerate_initramfs() {
    arch-chroot /mnt /bin/bash << EOF
        echo "Regenerating initramfs..."
        mkinitcpio -P
EOF
}


install_grub() {
    arch-chroot /mnt /bin/bash << EOF 
        echo "Installing and configuring GRUB..."
        pacman -S --noconfirm grub efibootmgr
        grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=ArchLinuxGRUB

        if [ "$installation_type" = "$LVM_ENCRYPTED" ]; then
            uuid=\$(blkid -t PARTLABEL=ArchLVM|awk '{print \$2}'|tr -d \")
            sed -i "s/^GRUB_CMDLINE_LINUX_DEFAULT=\"[^\"]*/& cryptdevice=\$uuid:cryptlvm/" /etc/default/grub
        fi

        if [ "$installation_type" = "$LVM_UNENCRYPTED" ] || [ "$installation_type" = "$LVM_ENCRYPTED" ]; then
            sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT="[^"]*/& root=\/dev\/ArchLinuxVG\/root/' /etc/default/grub
        fi

        grub-mkconfig -o /boot/grub/grub.cfg
EOF
}

format_partitions() {
    echo "Formatting partitions"
    mkfs.fat -F 32 $BOOT_PARTITION
    if [ -n $swap_size ]; then
        mkswap $SWAP_PARTITION
    fi
    mkfs.ext4 $ROOT_PARTITION
    mkfs.ext4 $HOME_PARTITION
}

mount_partitions() {
    mount $ROOT_PARTITION /mnt

    echo "Creating mountpoints..."
    mkdir /mnt/boot /mnt/home

    echo "Mounting partitions..."
    mount $BOOT_PARTITION /mnt/boot
    mount $HOME_PARTITION /mnt/home

    if [ -n $swap_size ]; then
        echo "Enabling swap..."
        swapon $SWAP_PARTITION
    fi
}

lvm_setup() {
    echo "Creating physical volume..."
    pvcreate $MAIN_PARTITION
    echo "Creating volume group..."
    vgcreate ArchLinuxVG $MAIN_PARTITION
    echo "Creating logical volumes..."
    if [ -n $swap_size ]; then
        lvcreate --yes -L "$swap_size" -n swap /dev/ArchLinuxVG
    fi
    lvcreate --yes -L 50G -n root /dev/ArchLinuxVG
    lvcreate --yes -l 100%FREE -n home /dev/ArchLinuxVG
}

create_lvm_partitions() {
    echo "Wiping previous signatures..."
    wipefs --all $MAIN_DRIVE_DEVICE
    echo "Creating boot partition..."
    sfdisk \
        --wipe-partitions always \
        --backup \
        $MAIN_DRIVE_DEVICE << EOF
        label: gpt
        size=1G,type=uefi,name=ArchBoot
        size=-,type=lvm,name=ArchLVM
EOF
    sleep .1
}

if [ -z "$(stat $1 2> /dev/null | grep 'block special file')" ]; then
    echo "[unattended-install] ERROR: $1 is not a valid block device"
    usage
    exit 1
fi

readonly MAIN_DRIVE_DEVICE="$1"
shift

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --installation_type|-t)
            installation_type="$2";
            shift
            ;;
        --encryption_key|-e)
            encryption_key="$2";
            shift
            ;;
        --root_passwd|-p)
            root_passwd="$2";
            shift
            ;;
        --timezone)
            timezone="$2";
            shift
            ;;
        --hostname|-h)
            hostname="$2";
            shift
            ;;
        --swap)
            swap_size="$2"
            shift
            ;;
        *)
            usage
            ;;
    esac
    shift
done

if [[ -z "$installation_type" || ("$installation_type" = "$LVM_ENCRYPTED" && -z "$encryption_key") ]]; then
    usage
fi

echo "Running unattended archlinux installation at $(date --rfc-3339=seconds)..."

sleep 1

echo "Testing internet connection..."
if ! ping -c 1 archlinux.org > /dev/null 2>&1; then
    echo "[unattended-install] ERROR: No Internet Connection. Please check your connection and try again."
    exit 1
fi

case "$installation_type" in
    $EXT4_UNENCRYPTED)
        echo "Using unencrypted ext4 partitions"
        sleep .5

        sfdisk_cmd="label:gpt\nsize=1G,type=uefi,name=ArchBoot\n"
        if [ -n "$swap_size" ]; then
            sfdisk_cmd+="size=$swap_size,type=swap,name=ArchSwap\n"
        fi
        sfdisk_cmd+="size=50G,type=linux,name=ArchRoot\n"
        sfdisk_cmd+="size=-,type=linux,name=ArchHome"

        echo "Creating partitions..."
        echo -e "$sfdisk_cmd" | sfdisk \
            --wipe-partitions always \
            --backup \
            "$MAIN_DRIVE_DEVICE"

        sleep .1

        readonly BOOT_PARTITION="/dev/disk/by-partlabel/ArchBoot"
        readonly SWAP_PARTITION="/dev/disk/by-partlabel/ArchSwap"
        readonly ROOT_PARTITION="/dev/disk/by-partlabel/ArchRoot"
        readonly HOME_PARTITION="/dev/disk/by-partlabel/ArchHome"

        format_partitions
        mount_partitions

        echo "Installing base packages..."
        pacstrap -K /mnt base linux linux-firmware vim man-db man-pages texinfo

        post_install
        install_grub
        ;;
    $LVM_UNENCRYPTED)
        echo "Using unencrypted lvm partitions"
        sleep .5

        create_lvm_partitions

        readonly MAIN_PARTITION="/dev/disk/by-partlabel/ArchLVM"

        lvm_setup

        readonly BOOT_PARTITION="/dev/disk/by-partlabel/ArchBoot"
        readonly SWAP_PARTITION="/dev/ArchLinuxVG/swap"
        readonly ROOT_PARTITION="/dev/ArchLinuxVG/root"
        readonly HOME_PARTITION="/dev/ArchLinuxVG/home"

        format_partitions
        mount_partitions

        echo "Installing base packages..."
        pacstrap -K /mnt base linux linux-firmware vim lvm2 man-db man-pages texinfo

        post_install
        add_lvm2_hook
        regenerate_initramfs
        install_grub
        ;;
    $LVM_ENCRYPTED)
        echo "Using encrypted lvm partitions"
        sleep .5

        create_lvm_partitions

        echo "Encrypting partition..."
        echo $encryption_key | cryptsetup luksFormat /dev/disk/by-partlabel/ArchLVM
        echo "Open encrypted partition..."
        echo $encryption_key | cryptsetup open /dev/disk/by-partlabel/ArchLVM cryptlvm

        readonly MAIN_PARTITION="/dev/mapper/cryptlvm"

        lvm_setup

        readonly BOOT_PARTITION="/dev/disk/by-partlabel/ArchBoot"
        readonly SWAP_PARTITION="/dev/ArchLinuxVG/swap"
        readonly ROOT_PARTITION="/dev/ArchLinuxVG/root"
        readonly HOME_PARTITION="/dev/ArchLinuxVG/home"

        format_partitions
        mount_partitions

        echo "Installing base packages..."
        pacstrap -K /mnt base linux linux-firmware vim lvm2 man-db man-pages texinfo

        post_install
        add_lvm2_hook
        add_encrypt_hook
        regenerate_initramfs
        install_grub
        ;;
    *)
        echo "[unattended-install] ERROR: $installation_type is unknown installation type "
        usage
        ;;
esac
