#!/bin/bash

# Installation types
readonly EXT4_UNENCRYPTED="ext4"
readonly LVM_UNENCRYPTED="lvm"
readonly LVM_ENCRYPTED="lvm_encrypted"
readonly LVM_ENCRYPTED_DETACHED="lvm_detached"

installation_type=$EXT4_UNENCRYPTED
encryption_key=""
root_passwd="arch"
hostname="arch"
timezone="UTC"
reboot=0

swap_size=$(free --giga|grep "Mem"|awk '{print $2}')G
boot_size="1G"
root_size="50G"
home_size="-"

usb_drive=""

usage() {
    echo
    echo "Usage:"
    echo "$0 DEVICE [OPTION]"
    echo
    echo "Automate basic Arch Linux installation"
    echo
    echo "Options:"
    echo "-t, --installation_type   Set the installation type (ext4, lvm, lvm_encrypted) (default: ext4)"
    echo "-e, --encryption_key      Set the encryption key for LUKS2 encrypted device"
    echo "-p, --root_passwd         Set the root password (default: arch)"
    echo "--timezone                Set the system timezone (default: UTC)"
    echo "--host, --hostname        Set the system hostname (default: arch)"
    echo "--reboot                  Reboot machine after install"
    echo "--swap                    Set the swap size, pass '-' to disable swap (default: RAM size)"
    echo "--boot                    Set the boot partition size (default: 1G)"
    echo "--root                    Set the root partition size (default: 50G)"
    echo "--home                    Set the home partition size, pass - to use all free space (default: all free space)"
    echo "--usb                     Set the usb drive to save encrypted /boot and detached LUKS header (only useful in lvm_detached installation)"
    echo "--help                    Display this help and exit"
    echo
    echo "Examples:"
    echo "unattended-install /dev/sda -p test --swap"
    echo "unattended-install /dev/sda --home 100G"
    echo "unattended-install /dev/sda --boot 512M --timezone Europe/Madrid"
    echo "unattended-install /dev/sda -e secret --hostname homePC"
    echo
    echo "Installation types:"
    echo "ext4                      Use ext4 formated partitions"
    echo "lvm                       Use lvm volumes"
    echo "lvm_encrypted             Use lvm volumes on LUKS2 encrypted partition"
    echo "lvm_detached              Use lvm volumes on LUKS2 encrypted partition with a detached header and also /boot encrypted in an usb"
}

post_install() {
    echo "Creating fstab..."
    genfstab -U /mnt >> /mnt/etc/fstab

    echo "Chroot..."
    arch-chroot /mnt /bin/bash << EOF
        echo "Setting timezone..."
        ln -sf /usr/share/zoneinfo/$timezone /etc/localtime

        echo "Setting hardware clock"
        hwclock --systohc

        sed -i "/en_US.UTF-8/s/^#//" /etc/locale.gen
        locale-gen

        echo "Setting default lang..."
        echo -e "LANG=en_US.UTF-8" > /etc/locale.conf

        echo "Setting hostname..."
        echo $hostname > /etc/hostname

        echo "Setting root password..."
        echo "root:$root_passwd" | chpasswd

        if [[ "$installation_type" = "$LVM_UNENCRYPTED" \
            || "$installation_type" = "$LVM_ENCRYPTED" \
            || "$installation_type" = "$LVM_ENCRYPTED_DETACHED"
        ]]; then
            pacman -S --noconfirm lvm2
        fi
EOF
}

add_lvm2_hook() {
    arch-chroot /mnt /bin/bash << EOF
        echo "Adding lvm2 hook..."
        sed -ri "s/(^HOOKS=.*)(block)(.*)(filesystems)/\1\2 lvm2 \4/" /etc/mkinitcpio.conf
EOF
}

add_encrypt_hook() {
    arch-chroot /mnt /bin/bash << EOF
        echo "Adding encrypt hook..."
        sed -ri "s/(^HOOKS=.*)(block)(.*)(lvm2)/\1\2 encrypt \4/" /etc/mkinitcpio.conf
EOF
}

regenerate_initramfs() {
    arch-chroot /mnt /bin/bash << EOF
        echo "Regenerating initramfs..."
        mkinitcpio -P
EOF
}


install_grub() {
    local efi_directory=${1:-"/boot"}

    arch-chroot /mnt /bin/bash << EOF 
        echo "Installing and configuring GRUB..."
        pacman -S --noconfirm grub efibootmgr

        if [ "$installation_type" = "$LVM_ENCRYPTED" ]; then
            uuid=\$(blkid -t PARTLABEL=ArchLVM|awk '{print \$2}'|tr -d \")
            sed -i "s/^GRUB_CMDLINE_LINUX_DEFAULT=\"[^\"]*/& cryptdevice=\$uuid:cryptarch/" /etc/default/grub
        fi

        if [ "$installation_type" = "$LVM_UNENCRYPTED" ] || [ "$installation_type" = "$LVM_ENCRYPTED" ]; then
            sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT="[^"]*/& root=\/dev\/ArchLinuxVG\/root/' /etc/default/grub
        fi

        if [ "$installation_type" = "$LVM_ENCRYPTED_DETACHED" ]; then
            sed -i "/GRUB_ENABLE_CRYPTODISK=y/s/^#//" /etc/default/grub
        fi

        grub-install --target=x86_64-efi --efi-directory=$efi_directory --bootloader-id=ArchLinuxGRUB

        grub-mkconfig -o /boot/grub/grub.cfg
EOF
}

format_partitions() {
    echo "Formatting partitions"
    if [ -n "$EFI_PARTITION" ]; then
        mkfs.fat -F 32 "$EFI_PARTITION"
    else
        mkfs.fat -F 32 "$BOOT_PARTITION"
    fi

    if [ -n $swap_size ]; then
        mkswap $SWAP_PARTITION
    fi
    mkfs.ext4 $ROOT_PARTITION
    mkfs.ext4 $HOME_PARTITION
}

mount_partitions() {
    mount $ROOT_PARTITION /mnt

    echo "Creating mountpoints..."
    mkdir /mnt/boot /mnt/home

    echo "Mounting partitions..."
    mount $BOOT_PARTITION /mnt/boot
    mount $HOME_PARTITION /mnt/home

    if [ -n $swap_size ]; then
        echo "Enabling swap..."
        swapon $SWAP_PARTITION
    fi

    if [ -n "$EFI_PARTITION" ]; then
        mkdir /mnt/boot/efi
        mount "$EFI_PARTITION" /mnt/boot/efi
    fi
}

lvm_setup() {
    echo "Creating physical volume..."
    pvcreate $MAIN_PARTITION
    echo "Creating volume group..."
    vgcreate ArchLinuxVG $MAIN_PARTITION
    echo "Creating logical volumes..."
    if [ -n $swap_size ]; then
        lvcreate --yes -L "$swap_size" -n swap /dev/ArchLinuxVG
    fi
    lvcreate --yes -L $root_size -n root /dev/ArchLinuxVG

    if [ "$home_size" = "-" ]; then
        lvcreate --yes -l 100%FREE -n home /dev/ArchLinuxVG
    else
        lvcreate --yes -L "$home_size" -n home /dev/ArchLinuxVG
    fi
}

create_lvm_partitions() {
    echo "Wiping previous signatures..."
    wipefs --all $MAIN_DRIVE_DEVICE
    echo "Creating boot partition..."
    sfdisk \
        --wipe-partitions always \
        --backup \
        $MAIN_DRIVE_DEVICE << EOF
        label: gpt
        size=$boot_size,type=uefi,name=ArchBoot
        size=-,type=lvm,name=ArchLVM
EOF
    sleep .1
}

create_custom_encrypt_hook() {
    echo "Creating custom encrypt hook..."
    cat << EOF > /mnt/etc/initcpio/hooks/customencrypt
#!/usr/bin/ash

run_hook() {
    modprobe -a -q dm-crypt >/dev/null 2>&1
    modprobe loop
    [ "\${quiet}" = "y" ] && CSQUIET=">/dev/null"

    while [ ! -L '/dev/disk/by-partlabel/ArchBoot' ]; do
     echo 'Waiting for USB'
     sleep 1
    done

    cryptsetup open /dev/disk/by-partlabel/ArchBoot cryptboot
    mount --mkdir /dev/mapper/cryptboot /mnt

    cryptsetup --header=/mnt/header.img --key-file=/mnt/key.img open /dev/disk/by-id/$(lsblk -o ID-LINK $MAIN_DRIVE_DEVICE|sed -n "2p") cryptroot
    umount /mnt
}
EOF
    cp /mnt/usr/lib/initcpio/install/encrypt /mnt/etc/initcpio/install/customencrypt
    sed -i '/help() {/,/}/d' /mnt/etc/initcpio/install/customencrypt

    echo "Adding custom encrypt hook..."
    arch-chroot /mnt /bin/bash << EOF
        sed -ri "s/(^HOOKS=.*)(block)(.*)(lvm2)/\1\2 customencrypt \4/" /etc/mkinitcpio.conf
        echo "Adding loop module to initcpio"
        sed -i "/^MODULES=/s/)/ loop&/" /etc/mkinitcpio.conf
EOF
}

install_base_packages() {
    echo "Installing base packages..."
    pacstrap -K /mnt base linux linux-firmware vim man-db man-pages texinfo
}

if [[ "--help" == "$1" || "-h" == "$1" ]];then
    usage
    exit 0
fi

if [ -z "$(stat -L $1 2> /dev/null | grep 'block special file')" ]; then
    echo "[unattended-install] ERROR: $1 is not a valid block device"
    usage
    exit 1
fi

readonly MAIN_DRIVE_DEVICE="$1"
shift

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --help|-h)
            usage
            exit 0
            ;;
        --installation_type|-t)
            installation_type="$2";
            if [ -z "$installation_type" ]; then
                echo "[unattended-install] ERROR: Installation type cannot be empty"
                usage
                exit 1
            fi
            shift 2
            ;;
        --encryption_key|-e)
            shift
            while [[ $# -gt 0 && $1 != -* ]]; do
                encryption_key+="$1 "
                shift
            done

            encryption_key=$(echo "$encryption_key" | sed 's/[[:space:]]*$//')

            if [ -z "$encryption_key" ]; then
                echo "[unattended-install] ERROR: Encryption key cannot be empty"
                usage
                exit 1
            fi
            ;;
        --root_passwd|-p)
            root_passwd=""
            shift
            while [[ $# -gt 0 && $1 != -* ]]; do
                root_passwd+="$1 "
                shift
            done

            root_passwd=$(echo "$root_passwd" | sed 's/[[:space:]]*$//')

            if [ -z "$root_passwd" ]; then
                echo "[unattended-install] ERROR: Root password cannot be empty"
                usage
                exit 1
            fi
            ;;
        --timezone)
            timezone="$2";
            if [ -z "$timezone" ]; then
                echo "[unattended-install] ERROR: Timezone cannot be empty"
                usage
                exit 1
            fi
            if [ ! -e "/usr/share/zoneinfo/$timezone" ]; then
                echo "[unattended-install] ERROR: $timezone is not a valid timezone"
                usage
                exit 1
            fi
            shift 2
            ;;
        --hostname|--host)
            hostname="$2";
            if [ -z "$hostname" ]; then
                echo "[unattended-install] ERROR: Hostname cannot be empty"
                usage
                exit 1
            fi
            shift 2
            ;;
        --reboot)
            reboot=1
            shift
            ;;
        --swap)
            if [ "$2" = "-" ]; then
                swap_size=""
            else
                swap_size="$2"
            fi
            shift 2
            ;;
        --boot)
            boot_size="$2"
            if [ -z "$boot_size" ]; then
                echo "[unattended-install] ERROR: Boot partition size cannot be empty"
                usage
                exit 1
            fi
            shift 2
            ;;
        --root)
            root_size="$2"
            if [ -z "$root_size" ]; then
                echo "[unattended-install] ERROR: Root partition size cannot be empty"
                usage
                exit 1
            fi
            shift 2
            ;;
        --home)
            home_size="$2"
            if [ -z "$home_size" ]; then
                echo "[unattended-install] ERROR: Home partition size cannot be empty"
                usage
                exit 1
            fi
            shift 2
            ;;
        --usb)
            usb_drive="$2"
            if [ -n "$usb_drive" ]; then
                if [ -z "$(stat $usb_drive 2> /dev/null | grep 'block special file')" ]; then
                    echo "[unattended-install] ERROR: $usb_drive is not a valid block device"
                    usage
                    exit 1
                fi
                shift 2
            else
                shift
            fi
            ;;
        *)
            echo "[unattended-install] ERROR: $1 is unknown parameter"
            usage
            exit 1
            ;;
    esac
done

if [[ ("$installation_type" = "$LVM_ENCRYPTED" || "$installation_type" = "$LVM_ENCRYPTED_DETACHED" ) && -z "$encryption_key" ]]; then
    echo "[unattended-install] ERROR: Must be provide an encryption key for use encryption"
    usage
    exit 1
fi

if [[ "$installation_type" = "$LVM_ENCRYPTED_DETACHED" && -z "$usb_drive" ]]; then
    echo "[unattended-install] ERROR: Must be provide an usb drive to store /boot and detached LUKS header in lvm_detached installation"
    usage
    exit 1
fi

echo "Running unattended archlinux installation at $(date --rfc-3339=seconds)..."

sleep 1

echo "Testing internet connection..."
if ! nslookup archlinux.org > /dev/null 2>&1; then
    echo "[unattended-install] ERROR: No Internet Connection. Please check your connection and try again."
    exit 1
fi

case "$installation_type" in
    $EXT4_UNENCRYPTED)
        echo "Using unencrypted ext4 partitions"
        sleep .5

        sfdisk_cmd="label:gpt\nsize=$boot_size,type=uefi,name=ArchBoot\n"
        if [ -n "$swap_size" ]; then
            sfdisk_cmd+="size=$swap_size,type=swap,name=ArchSwap\n"
        fi
        sfdisk_cmd+="size=$root_size,type=linux,name=ArchRoot\n"
        sfdisk_cmd+="size=$home_size,type=linux,name=ArchHome"

        echo "Creating partitions..."
        echo -e "$sfdisk_cmd" | sfdisk \
            --wipe-partitions always \
            --backup \
            "$MAIN_DRIVE_DEVICE"

        sleep .1

        readonly BOOT_PARTITION="/dev/disk/by-partlabel/ArchBoot"
        readonly SWAP_PARTITION="/dev/disk/by-partlabel/ArchSwap"
        readonly ROOT_PARTITION="/dev/disk/by-partlabel/ArchRoot"
        readonly HOME_PARTITION="/dev/disk/by-partlabel/ArchHome"

        format_partitions
        mount_partitions

        install_base_packages

        post_install
        install_grub
        ;;
    $LVM_UNENCRYPTED)
        echo "Using unencrypted lvm partitions"
        sleep .5

        create_lvm_partitions

        readonly MAIN_PARTITION="/dev/disk/by-partlabel/ArchLVM"

        lvm_setup

        readonly BOOT_PARTITION="/dev/disk/by-partlabel/ArchBoot"
        readonly SWAP_PARTITION="/dev/ArchLinuxVG/swap"
        readonly ROOT_PARTITION="/dev/ArchLinuxVG/root"
        readonly HOME_PARTITION="/dev/ArchLinuxVG/home"

        format_partitions
        mount_partitions

        install_base_packages

        post_install
        add_lvm2_hook
        regenerate_initramfs
        install_grub
        ;;
    $LVM_ENCRYPTED)
        echo "Using encrypted lvm partitions"
        sleep .5

        create_lvm_partitions

        echo "Encrypting partition..."
        echo $encryption_key | cryptsetup luksFormat /dev/disk/by-partlabel/ArchLVM
        echo "Open encrypted partition..."
        echo $encryption_key | cryptsetup open /dev/disk/by-partlabel/ArchLVM cryptarch

        readonly MAIN_PARTITION="/dev/mapper/cryptarch"

        lvm_setup

        readonly BOOT_PARTITION="/dev/disk/by-partlabel/ArchBoot"
        readonly SWAP_PARTITION="/dev/ArchLinuxVG/swap"
        readonly ROOT_PARTITION="/dev/ArchLinuxVG/root"
        readonly HOME_PARTITION="/dev/ArchLinuxVG/home"

        format_partitions
        mount_partitions

        install_base_packages

        post_install
        add_lvm2_hook
        add_encrypt_hook
        regenerate_initramfs
        install_grub
        ;;
    $LVM_ENCRYPTED_DETACHED)
        echo "Using encrypted lvm partitions with detached LUKS header"
        sleep .5

        echo "Creating partitions..."
        echo -e "size=512M,type=uefi,name=ArchUEFI\nsize=1G,type=linux,name=ArchBoot" | \
        sfdisk \
            --append \
            --wipe-partitions always \
            --backup \
            $usb_drive
        sleep 1

        echo "Encrypting /boot partition..."
        echo "$encryption_key" | cryptsetup \
            --cipher=twofish-xts-plain64 \
            --iter-time 5000 \
            --pbkdf pbkdf2 \
            luksFormat /dev/disk/by-partlabel/ArchBoot

        echo "Open encrypted /boot partition..."
        echo "$encryption_key" | cryptsetup open /dev/disk/by-partlabel/ArchBoot cryptboot

        echo "Formatting /boot partition..."
        mkfs.ext2 -F /dev/mapper/cryptboot

        mount /dev/mapper/cryptboot /mnt

        echo "Creating key file..."
        dd if=/dev/urandom of=/mnt/key.img bs=4096 count=1 iflag=fullblock

        echo "Creating header file..."
        truncate -s 16M /mnt/header.img

        echo "Encrypting main device..."
        cryptsetup \
            --batch-mode \
            --cipher=serpent-xts-plain64 \
            --key-size=512 \
            --iter-time 5000 \
            luksFormat $MAIN_DRIVE_DEVICE \
            --header=/mnt/header.img \
            --key-file=/mnt/key.img

        echo "Openning encrypted main device..."
        cryptsetup \
            open $MAIN_DRIVE_DEVICE cryptroot \
            --key-file=/mnt/key.img \
            --header=/mnt/header.img

        umount /mnt

        readonly MAIN_PARTITION="/dev/mapper/cryptroot"

        lvm_setup

        readonly BOOT_PARTITION="/dev/mapper/cryptboot"
        readonly EFI_PARTITION="/dev/disk/by-partlabel/ArchUEFI"
        readonly SWAP_PARTITION="/dev/ArchLinuxVG/swap"
        readonly ROOT_PARTITION="/dev/ArchLinuxVG/root"
        readonly HOME_PARTITION="/dev/ArchLinuxVG/home"

        format_partitions
        mount_partitions

        install_base_packages

        post_install
        add_lvm2_hook

        create_custom_encrypt_hook
        regenerate_initramfs

        install_grub "/boot/efi"
        ;;
    *)
        echo "[unattended-install] ERROR: $installation_type is unknown installation type "
        usage
        exit 1
        ;;
esac
if [ "$reboot" -eq 1 ]; then
    reboot
fi
